#!/usr/bin/env ruby

require 'rubygems'
require 'find'
require 'optparse'
require 'dotsmack'
require 'enlint'
require 'json'

STAT_HEADER = <<-eos
{
  "statVersion": "0.4.0",
  "process": {
    "name": "Encoding Linter",
    "version": "#{EnLint::VERSION}",
    "description": "Enlint helps identify strange file encodings, that may cause problems with software interoperability",
    "maintainer": "Andrew Pennebaker",
    "email": "andrew.pennebaker@gmail.com",
    "website": "https://github.com/mcandre/enlint",
    "repeatability": "Associative"
  },
  "findings": [
eos

STAT_FOOTER = <<-eos

  ]
}
eos

def main
  ignores = DEFAULT_IGNORES

  configuration_flags = {}

  is_stat = false

  option = OptionParser.new do |option|
    option.banner = 'Usage: enlint [options] [<files>]'

    option.on('-i', '--ignore pattern', 'Ignore file patterns (fnmatch)') do |pattern|
      ignores << pattern
    end

    option.on('-s', '--stat', 'Output in STAT') do
      is_stat = true
    end

    option.on('-h', '--help', 'Print usage info') do
      puts option
      exit
    end

    option.on('-v', '--version', 'Print version info') do
      puts "enlint #{EnLint::VERSION}"
      exit
    end
  end

  option.parse!

  filenames =
    if ARGV == []
      ['.']
    else
      ARGV
    end

  dotsmack = Dotsmack::Smacker.new(
    dotignore = '.enlintignore',
    additional_ignores = ignores,
    dotconfig = '.enlintrc.yml',
  )

  finding_count = 0

  dotsmack.enumerate(filenames).each do |filename, config|
    if !is_stat
      check(filename, config, is_stat)
    else
      check(filename, config, is_stat) { |finding|
        puts STAT_HEADER if finding_count == 0
        puts ',' if finding_count > 0
        print JSON.pretty_generate(finding).lines.map { |line| '    ' + line }.join
        finding_count += 1
      }
    end
  end

  if is_stat && finding_count > 0
    puts STAT_FOOTER
  end
end

begin
  main
# User may quit enlint before completion.
rescue Interrupt
  nil
# enlint may be piped to another program (e.g. `less`),
# which is quit before enlint completes.
rescue Errno::EPIPE, Errno::EMFILE
  nil
end
